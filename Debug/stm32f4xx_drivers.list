
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c80  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000e28  08000e28  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000e28  08000e28  00020050  2**0
                  CONTENTS
  4 .ARM          00000000  08000e28  08000e28  00020050  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e28  08000e28  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e28  08000e28  00010e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e2c  08000e2c  00010e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  08000e30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  20000050  08000e80  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08000e80  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000201d  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000065b  00000000  00000000  0002209d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001f8  00000000  00000000  000226f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001b0  00000000  00000000  000228f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002a72  00000000  00000000  00022aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001b35  00000000  00000000  00025512  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000a886  00000000  00000000  00027047  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000318cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000744  00000000  00000000  00031948  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000050 	.word	0x20000050
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000e10 	.word	0x08000e10

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000054 	.word	0x20000054
 80001e4:	08000e10 	.word	0x08000e10

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <EXTI0_IRQHandler>:

	return  0;
}

void EXTI0_IRQHandler(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(0);
 80001fc:	2000      	movs	r0, #0
 80001fe:	f000 fb67 	bl	80008d0 <GPIO_IRQHandling>
}
 8000202:	bf00      	nop
 8000204:	bd80      	pop	{r7, pc}
	...

08000208 <I2C1_GPIOInits>:
 * PB6-> SCL
 * PB7 -> SDA
 */

void I2C1_GPIOInits(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b084      	sub	sp, #16
 800020c:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;

	I2CPins.pGPIOx = GPIOB;
 800020e:	4b0e      	ldr	r3, [pc, #56]	; (8000248 <I2C1_GPIOInits+0x40>)
 8000210:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFEN;
 8000212:	2302      	movs	r3, #2
 8000214:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOpType = GPIO_OP_TYPE_OP;
 8000216:	2301      	movs	r3, #1
 8000218:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PU;
 800021a:	2301      	movs	r3, #1
 800021c:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 800021e:	2304      	movs	r3, #4
 8000220:	737b      	strb	r3, [r7, #13]
	I2CPins. GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000222:	2302      	movs	r3, #2
 8000224:	72bb      	strb	r3, [r7, #10]

	//scl
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 8000226:	2306      	movs	r3, #6
 8000228:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	4618      	mov	r0, r3
 800022e:	f000 f8ab 	bl	8000388 <GPIO_Init>

	//sda
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 8000232:	2307      	movs	r3, #7
 8000234:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	4618      	mov	r0, r3
 800023a:	f000 f8a5 	bl	8000388 <GPIO_Init>

}
 800023e:	bf00      	nop
 8000240:	3710      	adds	r7, #16
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	40020400 	.word	0x40020400

0800024c <I2C1_Inits>:

void I2C1_Inits(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 8000250:	4b09      	ldr	r3, [pc, #36]	; (8000278 <I2C1_Inits+0x2c>)
 8000252:	4a0a      	ldr	r2, [pc, #40]	; (800027c <I2C1_Inits+0x30>)
 8000254:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8000256:	4b08      	ldr	r3, [pc, #32]	; (8000278 <I2C1_Inits+0x2c>)
 8000258:	2201      	movs	r2, #1
 800025a:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 800025c:	4b06      	ldr	r3, [pc, #24]	; (8000278 <I2C1_Inits+0x2c>)
 800025e:	2261      	movs	r2, #97	; 0x61
 8000260:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8000262:	4b05      	ldr	r3, [pc, #20]	; (8000278 <I2C1_Inits+0x2c>)
 8000264:	2200      	movs	r2, #0
 8000266:	729a      	strb	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8000268:	4b03      	ldr	r3, [pc, #12]	; (8000278 <I2C1_Inits+0x2c>)
 800026a:	4a05      	ldr	r2, [pc, #20]	; (8000280 <I2C1_Inits+0x34>)
 800026c:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 800026e:	4802      	ldr	r0, [pc, #8]	; (8000278 <I2C1_Inits+0x2c>)
 8000270:	f000 fc64 	bl	8000b3c <I2C_Init>

}
 8000274:	bf00      	nop
 8000276:	bd80      	pop	{r7, pc}
 8000278:	2000006c 	.word	0x2000006c
 800027c:	40005400 	.word	0x40005400
 8000280:	000186a0 	.word	0x000186a0

08000284 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b086      	sub	sp, #24
 8000288:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn,GpioLed;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 800028a:	4b13      	ldr	r3, [pc, #76]	; (80002d8 <GPIO_ButtonInit+0x54>)
 800028c:	60fb      	str	r3, [r7, #12]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 800028e:	2300      	movs	r3, #0
 8000290:	743b      	strb	r3, [r7, #16]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000292:	2300      	movs	r3, #0
 8000294:	747b      	strb	r3, [r7, #17]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000296:	2302      	movs	r3, #2
 8000298:	74bb      	strb	r3, [r7, #18]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800029a:	2300      	movs	r3, #0
 800029c:	74fb      	strb	r3, [r7, #19]

	GPIO_Init(&GPIOBtn);
 800029e:	f107 030c 	add.w	r3, r7, #12
 80002a2:	4618      	mov	r0, r3
 80002a4:	f000 f870 	bl	8000388 <GPIO_Init>

	//this is led gpio configuration
	GpioLed.pGPIOx = GPIOD;
 80002a8:	4b0c      	ldr	r3, [pc, #48]	; (80002dc <GPIO_ButtonInit+0x58>)
 80002aa:	603b      	str	r3, [r7, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 80002ac:	230c      	movs	r3, #12
 80002ae:	713b      	strb	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80002b0:	2301      	movs	r3, #1
 80002b2:	717b      	strb	r3, [r7, #5]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002b4:	2302      	movs	r3, #2
 80002b6:	71bb      	strb	r3, [r7, #6]
	GpioLed.GPIO_PinConfig.GPIO_PinOpType = GPIO_OP_TYPE_OP;
 80002b8:	2301      	movs	r3, #1
 80002ba:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002bc:	2300      	movs	r3, #0
 80002be:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOD,ENABLE);
 80002c0:	2101      	movs	r1, #1
 80002c2:	4806      	ldr	r0, [pc, #24]	; (80002dc <GPIO_ButtonInit+0x58>)
 80002c4:	f000 fa06 	bl	80006d4 <GPIO_PeriClockControl>

	GPIO_Init(&GpioLed);
 80002c8:	463b      	mov	r3, r7
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 f85c 	bl	8000388 <GPIO_Init>

}
 80002d0:	bf00      	nop
 80002d2:	3718      	adds	r7, #24
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	40020000 	.word	0x40020000
 80002dc:	40020c00 	.word	0x40020c00

080002e0 <main>:


int main(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af02      	add	r7, sp, #8

	GPIO_ButtonInit();
 80002e6:	f7ff ffcd 	bl	8000284 <GPIO_ButtonInit>

	//i2c pin inits
	I2C1_GPIOInits();
 80002ea:	f7ff ff8d 	bl	8000208 <I2C1_GPIOInits>

	//i2c peripheral configuration
	I2C1_Inits();
 80002ee:	f7ff ffad 	bl	800024c <I2C1_Inits>

	//enable the i2c peripheral
	I2C_PeripheralControl(I2C1,ENABLE);
 80002f2:	2101      	movs	r1, #1
 80002f4:	480b      	ldr	r0, [pc, #44]	; (8000324 <main+0x44>)
 80002f6:	f000 fb78 	bl	80009ea <I2C_PeripheralControl>

	while(1)
	{
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 80002fa:	bf00      	nop
 80002fc:	2100      	movs	r1, #0
 80002fe:	480a      	ldr	r0, [pc, #40]	; (8000328 <main+0x48>)
 8000300:	f000 fad0 	bl	80008a4 <GPIO_ReadFromInputPin>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d0f8      	beq.n	80002fc <main+0x1c>

		//to avoid button de-bouncing related issues 200ms of delay
//		delay();

		//send some data to the slave
		I2C_MasterSendData(&I2C1Handle,some_data,strlen((char*)some_data),SLAVE_ADDR,ENABLE);
 800030a:	4808      	ldr	r0, [pc, #32]	; (800032c <main+0x4c>)
 800030c:	f7ff ff6c 	bl	80001e8 <strlen>
 8000310:	4602      	mov	r2, r0
 8000312:	2301      	movs	r3, #1
 8000314:	9300      	str	r3, [sp, #0]
 8000316:	2368      	movs	r3, #104	; 0x68
 8000318:	4904      	ldr	r1, [pc, #16]	; (800032c <main+0x4c>)
 800031a:	4805      	ldr	r0, [pc, #20]	; (8000330 <main+0x50>)
 800031c:	f000 fcd4 	bl	8000cc8 <I2C_MasterSendData>
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000320:	e7eb      	b.n	80002fa <main+0x1a>
 8000322:	bf00      	nop
 8000324:	40005400 	.word	0x40005400
 8000328:	40020000 	.word	0x40020000
 800032c:	20000000 	.word	0x20000000
 8000330:	2000006c 	.word	0x2000006c

08000334 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000334:	480d      	ldr	r0, [pc, #52]	; (800036c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000336:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000338:	480d      	ldr	r0, [pc, #52]	; (8000370 <LoopForever+0x6>)
  ldr r1, =_edata
 800033a:	490e      	ldr	r1, [pc, #56]	; (8000374 <LoopForever+0xa>)
  ldr r2, =_sidata
 800033c:	4a0e      	ldr	r2, [pc, #56]	; (8000378 <LoopForever+0xe>)
  movs r3, #0
 800033e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000340:	e002      	b.n	8000348 <LoopCopyDataInit>

08000342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000346:	3304      	adds	r3, #4

08000348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800034a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800034c:	d3f9      	bcc.n	8000342 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800034e:	4a0b      	ldr	r2, [pc, #44]	; (800037c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000350:	4c0b      	ldr	r4, [pc, #44]	; (8000380 <LoopForever+0x16>)
  movs r3, #0
 8000352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000354:	e001      	b.n	800035a <LoopFillZerobss>

08000356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000358:	3204      	adds	r2, #4

0800035a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800035a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800035c:	d3fb      	bcc.n	8000356 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800035e:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000362:	f000 fd31 	bl	8000dc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000366:	f7ff ffbb 	bl	80002e0 <main>

0800036a <LoopForever>:

LoopForever:
    b LoopForever
 800036a:	e7fe      	b.n	800036a <LoopForever>
  ldr   r0, =_estack
 800036c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000374:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8000378:	08000e30 	.word	0x08000e30
  ldr r2, =_sbss
 800037c:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8000380:	20000094 	.word	0x20000094

08000384 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000384:	e7fe      	b.n	8000384 <ADC_IRQHandler>
	...

08000388 <GPIO_Init>:
 *      Author: neilpatel
 */
#include "stm32f407xx_gpio_driver.h"

void GPIO_Init(GPIO_Handle_t  *pGPIOHandle)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b088      	sub	sp, #32
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
	//configure the mode of pin
	uint32_t temp = 0;
 8000390:	2300      	movs	r3, #0
 8000392:	61fb      	str	r3, [r7, #28]
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	2101      	movs	r1, #1
 800039a:	4618      	mov	r0, r3
 800039c:	f000 f99a 	bl	80006d4 <GPIO_PeriClockControl>
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ALTFEN)
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	795b      	ldrb	r3, [r3, #5]
 80003a4:	2b02      	cmp	r3, #2
 80003a6:	d821      	bhi.n	80003ec <GPIO_Init+0x64>
	{
		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	795b      	ldrb	r3, [r3, #5]
 80003ac:	461a      	mov	r2, r3
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	791b      	ldrb	r3, [r3, #4]
 80003b2:	005b      	lsls	r3, r3, #1
 80003b4:	fa02 f303 	lsl.w	r3, r2, r3
 80003b8:	61fb      	str	r3, [r7, #28]
		pGPIOHandle->pGPIOx->MODER &= ~ (0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	681a      	ldr	r2, [r3, #0]
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	791b      	ldrb	r3, [r3, #4]
 80003c4:	4619      	mov	r1, r3
 80003c6:	2303      	movs	r3, #3
 80003c8:	408b      	lsls	r3, r1
 80003ca:	43db      	mvns	r3, r3
 80003cc:	4619      	mov	r1, r3
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	400a      	ands	r2, r1
 80003d4:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	6819      	ldr	r1, [r3, #0]
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	69fa      	ldr	r2, [r7, #28]
 80003e2:	430a      	orrs	r2, r1
 80003e4:	601a      	str	r2, [r3, #0]
		temp = 0;
 80003e6:	2300      	movs	r3, #0
 80003e8:	61fb      	str	r3, [r7, #28]
 80003ea:	e0cd      	b.n	8000588 <GPIO_Init+0x200>
	}
	else
	{
		//code in Interrupt mode
		//Falling Edge
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == (GPIO_MODE_IT_FT))
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	795b      	ldrb	r3, [r3, #5]
 80003f0:	2b04      	cmp	r3, #4
 80003f2:	d117      	bne.n	8000424 <GPIO_Init+0x9c>
		{
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003f4:	4b4b      	ldr	r3, [pc, #300]	; (8000524 <GPIO_Init+0x19c>)
 80003f6:	68db      	ldr	r3, [r3, #12]
 80003f8:	687a      	ldr	r2, [r7, #4]
 80003fa:	7912      	ldrb	r2, [r2, #4]
 80003fc:	4611      	mov	r1, r2
 80003fe:	2201      	movs	r2, #1
 8000400:	408a      	lsls	r2, r1
 8000402:	4611      	mov	r1, r2
 8000404:	4a47      	ldr	r2, [pc, #284]	; (8000524 <GPIO_Init+0x19c>)
 8000406:	430b      	orrs	r3, r1
 8000408:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800040a:	4b46      	ldr	r3, [pc, #280]	; (8000524 <GPIO_Init+0x19c>)
 800040c:	689b      	ldr	r3, [r3, #8]
 800040e:	687a      	ldr	r2, [r7, #4]
 8000410:	7912      	ldrb	r2, [r2, #4]
 8000412:	4611      	mov	r1, r2
 8000414:	2201      	movs	r2, #1
 8000416:	408a      	lsls	r2, r1
 8000418:	43d2      	mvns	r2, r2
 800041a:	4611      	mov	r1, r2
 800041c:	4a41      	ldr	r2, [pc, #260]	; (8000524 <GPIO_Init+0x19c>)
 800041e:	400b      	ands	r3, r1
 8000420:	6093      	str	r3, [r2, #8]
 8000422:	e035      	b.n	8000490 <GPIO_Init+0x108>
		}
		//Rising Edge
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == (GPIO_MODE_IT_RT))
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	795b      	ldrb	r3, [r3, #5]
 8000428:	2b05      	cmp	r3, #5
 800042a:	d117      	bne.n	800045c <GPIO_Init+0xd4>
		{
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800042c:	4b3d      	ldr	r3, [pc, #244]	; (8000524 <GPIO_Init+0x19c>)
 800042e:	689b      	ldr	r3, [r3, #8]
 8000430:	687a      	ldr	r2, [r7, #4]
 8000432:	7912      	ldrb	r2, [r2, #4]
 8000434:	4611      	mov	r1, r2
 8000436:	2201      	movs	r2, #1
 8000438:	408a      	lsls	r2, r1
 800043a:	4611      	mov	r1, r2
 800043c:	4a39      	ldr	r2, [pc, #228]	; (8000524 <GPIO_Init+0x19c>)
 800043e:	430b      	orrs	r3, r1
 8000440:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000442:	4b38      	ldr	r3, [pc, #224]	; (8000524 <GPIO_Init+0x19c>)
 8000444:	68db      	ldr	r3, [r3, #12]
 8000446:	687a      	ldr	r2, [r7, #4]
 8000448:	7912      	ldrb	r2, [r2, #4]
 800044a:	4611      	mov	r1, r2
 800044c:	2201      	movs	r2, #1
 800044e:	408a      	lsls	r2, r1
 8000450:	43d2      	mvns	r2, r2
 8000452:	4611      	mov	r1, r2
 8000454:	4a33      	ldr	r2, [pc, #204]	; (8000524 <GPIO_Init+0x19c>)
 8000456:	400b      	ands	r3, r1
 8000458:	60d3      	str	r3, [r2, #12]
 800045a:	e019      	b.n	8000490 <GPIO_Init+0x108>
		}
		//Falling-Rising Edge
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == (GPIO_MODE_IT_RFT))
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	795b      	ldrb	r3, [r3, #5]
 8000460:	2b06      	cmp	r3, #6
 8000462:	d115      	bne.n	8000490 <GPIO_Init+0x108>
		{
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000464:	4b2f      	ldr	r3, [pc, #188]	; (8000524 <GPIO_Init+0x19c>)
 8000466:	68db      	ldr	r3, [r3, #12]
 8000468:	687a      	ldr	r2, [r7, #4]
 800046a:	7912      	ldrb	r2, [r2, #4]
 800046c:	4611      	mov	r1, r2
 800046e:	2201      	movs	r2, #1
 8000470:	408a      	lsls	r2, r1
 8000472:	4611      	mov	r1, r2
 8000474:	4a2b      	ldr	r2, [pc, #172]	; (8000524 <GPIO_Init+0x19c>)
 8000476:	430b      	orrs	r3, r1
 8000478:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800047a:	4b2a      	ldr	r3, [pc, #168]	; (8000524 <GPIO_Init+0x19c>)
 800047c:	689b      	ldr	r3, [r3, #8]
 800047e:	687a      	ldr	r2, [r7, #4]
 8000480:	7912      	ldrb	r2, [r2, #4]
 8000482:	4611      	mov	r1, r2
 8000484:	2201      	movs	r2, #1
 8000486:	408a      	lsls	r2, r1
 8000488:	4611      	mov	r1, r2
 800048a:	4a26      	ldr	r2, [pc, #152]	; (8000524 <GPIO_Init+0x19c>)
 800048c:	430b      	orrs	r3, r1
 800048e:	6093      	str	r3, [r2, #8]
		}

		//Config GPIO port selection in SYSCFG_EXTICR
		uint32_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	791b      	ldrb	r3, [r3, #4]
 8000494:	089b      	lsrs	r3, r3, #2
 8000496:	b2db      	uxtb	r3, r3
 8000498:	61bb      	str	r3, [r7, #24]
		uint32_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%4;
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	791b      	ldrb	r3, [r3, #4]
 800049e:	f003 0303 	and.w	r3, r3, #3
 80004a2:	617b      	str	r3, [r7, #20]
		uint8_t portcode =GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a1f      	ldr	r2, [pc, #124]	; (8000528 <GPIO_Init+0x1a0>)
 80004aa:	4293      	cmp	r3, r2
 80004ac:	d04e      	beq.n	800054c <GPIO_Init+0x1c4>
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4a1e      	ldr	r2, [pc, #120]	; (800052c <GPIO_Init+0x1a4>)
 80004b4:	4293      	cmp	r3, r2
 80004b6:	d032      	beq.n	800051e <GPIO_Init+0x196>
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a1c      	ldr	r2, [pc, #112]	; (8000530 <GPIO_Init+0x1a8>)
 80004be:	4293      	cmp	r3, r2
 80004c0:	d02b      	beq.n	800051a <GPIO_Init+0x192>
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4a1b      	ldr	r2, [pc, #108]	; (8000534 <GPIO_Init+0x1ac>)
 80004c8:	4293      	cmp	r3, r2
 80004ca:	d024      	beq.n	8000516 <GPIO_Init+0x18e>
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a19      	ldr	r2, [pc, #100]	; (8000538 <GPIO_Init+0x1b0>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d01d      	beq.n	8000512 <GPIO_Init+0x18a>
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4a18      	ldr	r2, [pc, #96]	; (800053c <GPIO_Init+0x1b4>)
 80004dc:	4293      	cmp	r3, r2
 80004de:	d016      	beq.n	800050e <GPIO_Init+0x186>
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a16      	ldr	r2, [pc, #88]	; (8000540 <GPIO_Init+0x1b8>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d00f      	beq.n	800050a <GPIO_Init+0x182>
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a15      	ldr	r2, [pc, #84]	; (8000544 <GPIO_Init+0x1bc>)
 80004f0:	4293      	cmp	r3, r2
 80004f2:	d008      	beq.n	8000506 <GPIO_Init+0x17e>
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a13      	ldr	r2, [pc, #76]	; (8000548 <GPIO_Init+0x1c0>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d101      	bne.n	8000502 <GPIO_Init+0x17a>
 80004fe:	2308      	movs	r3, #8
 8000500:	e025      	b.n	800054e <GPIO_Init+0x1c6>
 8000502:	2300      	movs	r3, #0
 8000504:	e023      	b.n	800054e <GPIO_Init+0x1c6>
 8000506:	2307      	movs	r3, #7
 8000508:	e021      	b.n	800054e <GPIO_Init+0x1c6>
 800050a:	2306      	movs	r3, #6
 800050c:	e01f      	b.n	800054e <GPIO_Init+0x1c6>
 800050e:	2305      	movs	r3, #5
 8000510:	e01d      	b.n	800054e <GPIO_Init+0x1c6>
 8000512:	2304      	movs	r3, #4
 8000514:	e01b      	b.n	800054e <GPIO_Init+0x1c6>
 8000516:	2303      	movs	r3, #3
 8000518:	e019      	b.n	800054e <GPIO_Init+0x1c6>
 800051a:	2302      	movs	r3, #2
 800051c:	e017      	b.n	800054e <GPIO_Init+0x1c6>
 800051e:	2301      	movs	r3, #1
 8000520:	e015      	b.n	800054e <GPIO_Init+0x1c6>
 8000522:	bf00      	nop
 8000524:	40013c00 	.word	0x40013c00
 8000528:	40020000 	.word	0x40020000
 800052c:	40020400 	.word	0x40020400
 8000530:	40020800 	.word	0x40020800
 8000534:	40020c00 	.word	0x40020c00
 8000538:	40021000 	.word	0x40021000
 800053c:	40021400 	.word	0x40021400
 8000540:	40021500 	.word	0x40021500
 8000544:	40021c00 	.word	0x40021c00
 8000548:	40022000 	.word	0x40022000
 800054c:	2300      	movs	r3, #0
 800054e:	74fb      	strb	r3, [r7, #19]
		SYSCGF_PCLK_EN();
 8000550:	4b5d      	ldr	r3, [pc, #372]	; (80006c8 <GPIO_Init+0x340>)
 8000552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000554:	4a5c      	ldr	r2, [pc, #368]	; (80006c8 <GPIO_Init+0x340>)
 8000556:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800055a:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 800055c:	7cfa      	ldrb	r2, [r7, #19]
 800055e:	697b      	ldr	r3, [r7, #20]
 8000560:	009b      	lsls	r3, r3, #2
 8000562:	fa02 f303 	lsl.w	r3, r2, r3
 8000566:	4a59      	ldr	r2, [pc, #356]	; (80006cc <GPIO_Init+0x344>)
 8000568:	4619      	mov	r1, r3
 800056a:	69bb      	ldr	r3, [r7, #24]
 800056c:	3302      	adds	r3, #2
 800056e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// Enable Interrupt on respective pin
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000572:	4b57      	ldr	r3, [pc, #348]	; (80006d0 <GPIO_Init+0x348>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	687a      	ldr	r2, [r7, #4]
 8000578:	7912      	ldrb	r2, [r2, #4]
 800057a:	4611      	mov	r1, r2
 800057c:	2201      	movs	r2, #1
 800057e:	408a      	lsls	r2, r1
 8000580:	4611      	mov	r1, r2
 8000582:	4a53      	ldr	r2, [pc, #332]	; (80006d0 <GPIO_Init+0x348>)
 8000584:	430b      	orrs	r3, r1
 8000586:	6013      	str	r3, [r2, #0]
	}

	//configure speed
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed  << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	799b      	ldrb	r3, [r3, #6]
 800058c:	461a      	mov	r2, r3
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	791b      	ldrb	r3, [r3, #4]
 8000592:	005b      	lsls	r3, r3, #1
 8000594:	fa02 f303 	lsl.w	r3, r2, r3
 8000598:	61fb      	str	r3, [r7, #28]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~ (0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	689a      	ldr	r2, [r3, #8]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	791b      	ldrb	r3, [r3, #4]
 80005a4:	4619      	mov	r1, r3
 80005a6:	2303      	movs	r3, #3
 80005a8:	408b      	lsls	r3, r1
 80005aa:	43db      	mvns	r3, r3
 80005ac:	4619      	mov	r1, r3
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	400a      	ands	r2, r1
 80005b4:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	6899      	ldr	r1, [r3, #8]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	69fa      	ldr	r2, [r7, #28]
 80005c2:	430a      	orrs	r2, r1
 80005c4:	609a      	str	r2, [r3, #8]
	temp = 0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	61fb      	str	r3, [r7, #28]

	//Configure pupd
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl  << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	79db      	ldrb	r3, [r3, #7]
 80005ce:	461a      	mov	r2, r3
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	791b      	ldrb	r3, [r3, #4]
 80005d4:	005b      	lsls	r3, r3, #1
 80005d6:	fa02 f303 	lsl.w	r3, r2, r3
 80005da:	61fb      	str	r3, [r7, #28]
	pGPIOHandle->pGPIOx->PUPDR &= ~ (0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	68da      	ldr	r2, [r3, #12]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	791b      	ldrb	r3, [r3, #4]
 80005e6:	4619      	mov	r1, r3
 80005e8:	2303      	movs	r3, #3
 80005ea:	408b      	lsls	r3, r1
 80005ec:	43db      	mvns	r3, r3
 80005ee:	4619      	mov	r1, r3
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	400a      	ands	r2, r1
 80005f6:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	68d9      	ldr	r1, [r3, #12]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	69fa      	ldr	r2, [r7, #28]
 8000604:	430a      	orrs	r2, r1
 8000606:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	61fb      	str	r3, [r7, #28]

	//Configure the optype
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinOpType  << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	7a1b      	ldrb	r3, [r3, #8]
 8000610:	461a      	mov	r2, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	791b      	ldrb	r3, [r3, #4]
 8000616:	fa02 f303 	lsl.w	r3, r2, r3
 800061a:	61fb      	str	r3, [r7, #28]
	pGPIOHandle->pGPIOx->OTYPER &= ~ (0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	685a      	ldr	r2, [r3, #4]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	791b      	ldrb	r3, [r3, #4]
 8000626:	4619      	mov	r1, r3
 8000628:	2301      	movs	r3, #1
 800062a:	408b      	lsls	r3, r1
 800062c:	43db      	mvns	r3, r3
 800062e:	4619      	mov	r1, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	400a      	ands	r2, r1
 8000636:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	6859      	ldr	r1, [r3, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	69fa      	ldr	r2, [r7, #28]
 8000644:	430a      	orrs	r2, r1
 8000646:	605a      	str	r2, [r3, #4]
	temp = 0;
 8000648:	2300      	movs	r3, #0
 800064a:	61fb      	str	r3, [r7, #28]

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFEN)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	795b      	ldrb	r3, [r3, #5]
 8000650:	2b02      	cmp	r3, #2
 8000652:	d134      	bne.n	80006be <GPIO_Init+0x336>
	{
		uint32_t temp1;
		uint32_t temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/8;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	791b      	ldrb	r3, [r3, #4]
 8000658:	08db      	lsrs	r3, r3, #3
 800065a:	b2db      	uxtb	r3, r3
 800065c:	60fb      	str	r3, [r7, #12]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%8;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	791b      	ldrb	r3, [r3, #4]
 8000662:	f003 0307 	and.w	r3, r3, #7
 8000666:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~ (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*temp2));
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	68fa      	ldr	r2, [r7, #12]
 800066e:	3208      	adds	r2, #8
 8000670:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	7a5b      	ldrb	r3, [r3, #9]
 8000678:	4619      	mov	r1, r3
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	009b      	lsls	r3, r3, #2
 800067e:	fa01 f303 	lsl.w	r3, r1, r3
 8000682:	43db      	mvns	r3, r3
 8000684:	4619      	mov	r1, r3
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4011      	ands	r1, r2
 800068c:	68fa      	ldr	r2, [r7, #12]
 800068e:	3208      	adds	r2, #8
 8000690:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*temp2));
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	68fa      	ldr	r2, [r7, #12]
 800069a:	3208      	adds	r2, #8
 800069c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	7a5b      	ldrb	r3, [r3, #9]
 80006a4:	4619      	mov	r1, r3
 80006a6:	68bb      	ldr	r3, [r7, #8]
 80006a8:	009b      	lsls	r3, r3, #2
 80006aa:	fa01 f303 	lsl.w	r3, r1, r3
 80006ae:	4619      	mov	r1, r3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4311      	orrs	r1, r2
 80006b6:	68fa      	ldr	r2, [r7, #12]
 80006b8:	3208      	adds	r2, #8
 80006ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80006be:	bf00      	nop
 80006c0:	3720      	adds	r7, #32
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40013800 	.word	0x40013800
 80006d0:	40013c00 	.word	0x40013c00

080006d4 <GPIO_PeriClockControl>:
		GPIOI_REG_RESET();
	}
}

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx,uint8_t EnorDi)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	460b      	mov	r3, r1
 80006de:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80006e0:	78fb      	ldrb	r3, [r7, #3]
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d162      	bne.n	80007ac <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	4a64      	ldr	r2, [pc, #400]	; (800087c <GPIO_PeriClockControl+0x1a8>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d106      	bne.n	80006fc <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80006ee:	4b64      	ldr	r3, [pc, #400]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a63      	ldr	r2, [pc, #396]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 80006fa:	e0b9      	b.n	8000870 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	4a61      	ldr	r2, [pc, #388]	; (8000884 <GPIO_PeriClockControl+0x1b0>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d106      	bne.n	8000712 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000704:	4b5e      	ldr	r3, [pc, #376]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 8000706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000708:	4a5d      	ldr	r2, [pc, #372]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 800070a:	f043 0302 	orr.w	r3, r3, #2
 800070e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000710:	e0ae      	b.n	8000870 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	4a5c      	ldr	r2, [pc, #368]	; (8000888 <GPIO_PeriClockControl+0x1b4>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d106      	bne.n	8000728 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800071a:	4b59      	ldr	r3, [pc, #356]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a58      	ldr	r2, [pc, #352]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 8000720:	f043 0304 	orr.w	r3, r3, #4
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000726:	e0a3      	b.n	8000870 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	4a58      	ldr	r2, [pc, #352]	; (800088c <GPIO_PeriClockControl+0x1b8>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d106      	bne.n	800073e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000730:	4b53      	ldr	r3, [pc, #332]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 8000732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000734:	4a52      	ldr	r2, [pc, #328]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 8000736:	f043 0308 	orr.w	r3, r3, #8
 800073a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800073c:	e098      	b.n	8000870 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4a53      	ldr	r2, [pc, #332]	; (8000890 <GPIO_PeriClockControl+0x1bc>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d106      	bne.n	8000754 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000746:	4b4e      	ldr	r3, [pc, #312]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a4d      	ldr	r2, [pc, #308]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 800074c:	f043 0310 	orr.w	r3, r3, #16
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000752:	e08d      	b.n	8000870 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4a4f      	ldr	r2, [pc, #316]	; (8000894 <GPIO_PeriClockControl+0x1c0>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d106      	bne.n	800076a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 800075c:	4b48      	ldr	r3, [pc, #288]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 800075e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000760:	4a47      	ldr	r2, [pc, #284]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 8000762:	f043 0320 	orr.w	r3, r3, #32
 8000766:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000768:	e082      	b.n	8000870 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	4a4a      	ldr	r2, [pc, #296]	; (8000898 <GPIO_PeriClockControl+0x1c4>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d106      	bne.n	8000780 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000772:	4b43      	ldr	r3, [pc, #268]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a42      	ldr	r2, [pc, #264]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 8000778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800077e:	e077      	b.n	8000870 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4a46      	ldr	r2, [pc, #280]	; (800089c <GPIO_PeriClockControl+0x1c8>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d106      	bne.n	8000796 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000788:	4b3d      	ldr	r3, [pc, #244]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 800078a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078c:	4a3c      	ldr	r2, [pc, #240]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 800078e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000792:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000794:	e06c      	b.n	8000870 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4a41      	ldr	r2, [pc, #260]	; (80008a0 <GPIO_PeriClockControl+0x1cc>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d168      	bne.n	8000870 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 800079e:	4b38      	ldr	r3, [pc, #224]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a37      	ldr	r2, [pc, #220]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 80007a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007aa:	e061      	b.n	8000870 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	4a33      	ldr	r2, [pc, #204]	; (800087c <GPIO_PeriClockControl+0x1a8>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d106      	bne.n	80007c2 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 80007b4:	4b32      	ldr	r3, [pc, #200]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 80007b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b8:	4a31      	ldr	r2, [pc, #196]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 80007ba:	f023 0301 	bic.w	r3, r3, #1
 80007be:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007c0:	e056      	b.n	8000870 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4a2f      	ldr	r2, [pc, #188]	; (8000884 <GPIO_PeriClockControl+0x1b0>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d106      	bne.n	80007d8 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 80007ca:	4b2d      	ldr	r3, [pc, #180]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a2c      	ldr	r2, [pc, #176]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 80007d0:	f023 0302 	bic.w	r3, r3, #2
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007d6:	e04b      	b.n	8000870 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	4a2b      	ldr	r2, [pc, #172]	; (8000888 <GPIO_PeriClockControl+0x1b4>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d106      	bne.n	80007ee <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 80007e0:	4b27      	ldr	r3, [pc, #156]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 80007e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e4:	4a26      	ldr	r2, [pc, #152]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 80007e6:	f023 0304 	bic.w	r3, r3, #4
 80007ea:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007ec:	e040      	b.n	8000870 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4a26      	ldr	r2, [pc, #152]	; (800088c <GPIO_PeriClockControl+0x1b8>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d106      	bne.n	8000804 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 80007f6:	4b22      	ldr	r3, [pc, #136]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a21      	ldr	r2, [pc, #132]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 80007fc:	f023 0308 	bic.w	r3, r3, #8
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000802:	e035      	b.n	8000870 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4a22      	ldr	r2, [pc, #136]	; (8000890 <GPIO_PeriClockControl+0x1bc>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d106      	bne.n	800081a <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 800080c:	4b1c      	ldr	r3, [pc, #112]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 800080e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000810:	4a1b      	ldr	r2, [pc, #108]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 8000812:	f023 0310 	bic.w	r3, r3, #16
 8000816:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000818:	e02a      	b.n	8000870 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4a1d      	ldr	r2, [pc, #116]	; (8000894 <GPIO_PeriClockControl+0x1c0>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d106      	bne.n	8000830 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000822:	4b17      	ldr	r3, [pc, #92]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a16      	ldr	r2, [pc, #88]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 8000828:	f023 0320 	bic.w	r3, r3, #32
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800082e:	e01f      	b.n	8000870 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4a19      	ldr	r2, [pc, #100]	; (8000898 <GPIO_PeriClockControl+0x1c4>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d106      	bne.n	8000846 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000838:	4b11      	ldr	r3, [pc, #68]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 800083a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083c:	4a10      	ldr	r2, [pc, #64]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 800083e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000842:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000844:	e014      	b.n	8000870 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4a14      	ldr	r2, [pc, #80]	; (800089c <GPIO_PeriClockControl+0x1c8>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d106      	bne.n	800085c <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 800084e:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a0b      	ldr	r2, [pc, #44]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 8000854:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
}
 800085a:	e009      	b.n	8000870 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	4a10      	ldr	r2, [pc, #64]	; (80008a0 <GPIO_PeriClockControl+0x1cc>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d105      	bne.n	8000870 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 8000866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000868:	4a05      	ldr	r2, [pc, #20]	; (8000880 <GPIO_PeriClockControl+0x1ac>)
 800086a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800086e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000870:	bf00      	nop
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	40020000 	.word	0x40020000
 8000880:	40023800 	.word	0x40023800
 8000884:	40020400 	.word	0x40020400
 8000888:	40020800 	.word	0x40020800
 800088c:	40020c00 	.word	0x40020c00
 8000890:	40021000 	.word	0x40021000
 8000894:	40021400 	.word	0x40021400
 8000898:	40021500 	.word	0x40021500
 800089c:	40021c00 	.word	0x40021c00
 80008a0:	40022000 	.word	0x40022000

080008a4 <GPIO_ReadFromInputPin>:

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	460b      	mov	r3, r1
 80008ae:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR  >> PinNumber) & 0x0000001);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	691a      	ldr	r2, [r3, #16]
 80008b4:	78fb      	ldrb	r3, [r7, #3]
 80008b6:	fa22 f303 	lsr.w	r3, r2, r3
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	f003 0301 	and.w	r3, r3, #1
 80008c0:	73fb      	strb	r3, [r7, #15]
	return value;
 80008c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3714      	adds	r7, #20
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <GPIO_IRQHandling>:
	uint8_t shift_amount = (8*iprx_Section) +(8 - NO_PR_BITS_IMPLEMENTED);
	*(NVIC_PR_BASEADDR + iprx*4) = (IRQPriority << shift_amount);
}

void GPIO_IRQHandling(uint8_t PinNumber)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	71fb      	strb	r3, [r7, #7]
	if(EXTI->PR & (1<<PinNumber))
 80008da:	4b0c      	ldr	r3, [pc, #48]	; (800090c <GPIO_IRQHandling+0x3c>)
 80008dc:	695b      	ldr	r3, [r3, #20]
 80008de:	79fa      	ldrb	r2, [r7, #7]
 80008e0:	2101      	movs	r1, #1
 80008e2:	fa01 f202 	lsl.w	r2, r1, r2
 80008e6:	4013      	ands	r3, r2
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d009      	beq.n	8000900 <GPIO_IRQHandling+0x30>
	{
		EXTI->PR |= (1 <<PinNumber);
 80008ec:	4b07      	ldr	r3, [pc, #28]	; (800090c <GPIO_IRQHandling+0x3c>)
 80008ee:	695b      	ldr	r3, [r3, #20]
 80008f0:	79fa      	ldrb	r2, [r7, #7]
 80008f2:	2101      	movs	r1, #1
 80008f4:	fa01 f202 	lsl.w	r2, r1, r2
 80008f8:	4611      	mov	r1, r2
 80008fa:	4a04      	ldr	r2, [pc, #16]	; (800090c <GPIO_IRQHandling+0x3c>)
 80008fc:	430b      	orrs	r3, r1
 80008fe:	6153      	str	r3, [r2, #20]
	}
}
 8000900:	bf00      	nop
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	40013c00 	.word	0x40013c00

08000910 <I2C_GenerateStartCondition>:

static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle );
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle );

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	601a      	str	r2, [r3, #0]
}
 8000924:	bf00      	nop
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <I2C_ExecuteAddressPhaseWrite>:



static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	460b      	mov	r3, r1
 800093a:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 800093c:	78fb      	ldrb	r3, [r7, #3]
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); //SlaveAddr is Slave address + r/nw bit=0
 8000942:	78fb      	ldrb	r3, [r7, #3]
 8000944:	f023 0301 	bic.w	r3, r3, #1
 8000948:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 800094a:	78fa      	ldrb	r2, [r7, #3]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	611a      	str	r2, [r3, #16]
}
 8000950:	bf00      	nop
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <I2C_ClearADDRFlag>:
	pI2Cx->DR = SlaveAddr;
}


static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle )
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	699b      	ldr	r3, [r3, #24]
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	2b00      	cmp	r3, #0
 8000970:	d01f      	beq.n	80009b2 <I2C_ClearADDRFlag+0x56>
	{
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	7f1b      	ldrb	r3, [r3, #28]
 8000976:	2b01      	cmp	r3, #1
 8000978:	d112      	bne.n	80009a0 <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize  == 1)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	6a1b      	ldr	r3, [r3, #32]
 800097e:	2b01      	cmp	r3, #1
 8000980:	d11f      	bne.n	80009c2 <I2C_ClearADDRFlag+0x66>
			{
				//first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	2100      	movs	r1, #0
 8000988:	4618      	mov	r0, r3
 800098a:	f000 fa00 	bl	8000d8e <I2C_ManageAcking>

				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	695b      	ldr	r3, [r3, #20]
 8000994:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}


}
 800099e:	e010      	b.n	80009c2 <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	695b      	ldr	r3, [r3, #20]
 80009a6:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	699b      	ldr	r3, [r3, #24]
 80009ae:	60fb      	str	r3, [r7, #12]
}
 80009b0:	e007      	b.n	80009c2 <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	695b      	ldr	r3, [r3, #20]
 80009b8:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	60fb      	str	r3, [r7, #12]
}
 80009c2:	bf00      	nop
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <I2C_GenerateStopCondition>:


 void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 80009ca:	b480      	push	{r7}
 80009cc:	b083      	sub	sp, #12
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	601a      	str	r2, [r3, #0]
}
 80009de:	bf00      	nop
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr

080009ea <I2C_PeripheralControl>:

 }


void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 80009ea:	b480      	push	{r7}
 80009ec:	b083      	sub	sp, #12
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
 80009f2:	460b      	mov	r3, r1
 80009f4:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80009f6:	78fb      	ldrb	r3, [r7, #3]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d106      	bne.n	8000a0a <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f043 0201 	orr.w	r2, r3, #1
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	601a      	str	r2, [r3, #0]
	}else
	{
		pI2Cx->CR1 &= ~(1 << 0);
	}

}
 8000a08:	e005      	b.n	8000a16 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f023 0201 	bic.w	r2, r3, #1
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	601a      	str	r2, [r3, #0]
}
 8000a16:	bf00      	nop
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
	...

08000a24 <I2C_PeriClockControl>:


void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	460b      	mov	r3, r1
 8000a2e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000a30:	78fb      	ldrb	r3, [r7, #3]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d11f      	bne.n	8000a76 <I2C_PeriClockControl+0x52>
	{
		if(pI2Cx == I2C1)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4a12      	ldr	r2, [pc, #72]	; (8000a84 <I2C_PeriClockControl+0x60>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d106      	bne.n	8000a4c <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 8000a3e:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <I2C_PeriClockControl+0x64>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	4a11      	ldr	r2, [pc, #68]	; (8000a88 <I2C_PeriClockControl+0x64>)
 8000a44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a48:	6413      	str	r3, [r2, #64]	; 0x40
	else
	{
		//TODO
	}

}
 8000a4a:	e014      	b.n	8000a76 <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C2)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4a0f      	ldr	r2, [pc, #60]	; (8000a8c <I2C_PeriClockControl+0x68>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d106      	bne.n	8000a62 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000a54:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <I2C_PeriClockControl+0x64>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a58:	4a0b      	ldr	r2, [pc, #44]	; (8000a88 <I2C_PeriClockControl+0x64>)
 8000a5a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a5e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a60:	e009      	b.n	8000a76 <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C3)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a0a      	ldr	r2, [pc, #40]	; (8000a90 <I2C_PeriClockControl+0x6c>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d105      	bne.n	8000a76 <I2C_PeriClockControl+0x52>
			I2C3_PCLK_EN();
 8000a6a:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <I2C_PeriClockControl+0x64>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	4a06      	ldr	r2, [pc, #24]	; (8000a88 <I2C_PeriClockControl+0x64>)
 8000a70:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a74:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	40005400 	.word	0x40005400
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40005800 	.word	0x40005800
 8000a90:	40005c00 	.word	0x40005c00

08000a94 <RCC_GetPCLK1Value>:
uint32_t AHB_ARRAY[8] = { 2,4,8,16,32,64,128,256};
uint32_t AHB_ARRAY1[4] =  {2,4,8,16};
uint32_t RCC_GetPCLK1Value()
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
	uint8_t clksrc;
	uint8_t temp;
	uint8_t ahbp;
	uint8_t ahbp1;

	clksrc = ((RCC->CFGR >> 2) &0X3);
 8000a9a:	4b23      	ldr	r3, [pc, #140]	; (8000b28 <RCC_GetPCLK1Value+0x94>)
 8000a9c:	689b      	ldr	r3, [r3, #8]
 8000a9e:	089b      	lsrs	r3, r3, #2
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	f003 0303 	and.w	r3, r3, #3
 8000aa6:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0)
 8000aa8:	7a7b      	ldrb	r3, [r7, #9]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d102      	bne.n	8000ab4 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 8000aae:	4b1f      	ldr	r3, [pc, #124]	; (8000b2c <RCC_GetPCLK1Value+0x98>)
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	e004      	b.n	8000abe <RCC_GetPCLK1Value+0x2a>
	}
	else if (clksrc == 1)
 8000ab4:	7a7b      	ldrb	r3, [r7, #9]
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d101      	bne.n	8000abe <RCC_GetPCLK1Value+0x2a>
	{
		SystemClk = 8000000;
 8000aba:	4b1d      	ldr	r3, [pc, #116]	; (8000b30 <RCC_GetPCLK1Value+0x9c>)
 8000abc:	60fb      	str	r3, [r7, #12]
	}

	temp = ((RCC->CFGR >> 4)& 0xF);
 8000abe:	4b1a      	ldr	r3, [pc, #104]	; (8000b28 <RCC_GetPCLK1Value+0x94>)
 8000ac0:	689b      	ldr	r3, [r3, #8]
 8000ac2:	091b      	lsrs	r3, r3, #4
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	f003 030f 	and.w	r3, r3, #15
 8000aca:	723b      	strb	r3, [r7, #8]

	if(temp<8)
 8000acc:	7a3b      	ldrb	r3, [r7, #8]
 8000ace:	2b07      	cmp	r3, #7
 8000ad0:	d802      	bhi.n	8000ad8 <RCC_GetPCLK1Value+0x44>
	{
		ahbp =  1;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	72fb      	strb	r3, [r7, #11]
 8000ad6:	e005      	b.n	8000ae4 <RCC_GetPCLK1Value+0x50>
	}
	else
	{
		ahbp = AHB_ARRAY[temp-8];
 8000ad8:	7a3b      	ldrb	r3, [r7, #8]
 8000ada:	3b08      	subs	r3, #8
 8000adc:	4a15      	ldr	r2, [pc, #84]	; (8000b34 <RCC_GetPCLK1Value+0xa0>)
 8000ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae2:	72fb      	strb	r3, [r7, #11]
	}

	temp = ((RCC->CFGR >>10) & 0x7);
 8000ae4:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <RCC_GetPCLK1Value+0x94>)
 8000ae6:	689b      	ldr	r3, [r3, #8]
 8000ae8:	0a9b      	lsrs	r3, r3, #10
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	f003 0307 	and.w	r3, r3, #7
 8000af0:	723b      	strb	r3, [r7, #8]

	if(temp<4)
 8000af2:	7a3b      	ldrb	r3, [r7, #8]
 8000af4:	2b03      	cmp	r3, #3
 8000af6:	d802      	bhi.n	8000afe <RCC_GetPCLK1Value+0x6a>
	{
		ahbp1 =  1;
 8000af8:	2301      	movs	r3, #1
 8000afa:	72bb      	strb	r3, [r7, #10]
 8000afc:	e005      	b.n	8000b0a <RCC_GetPCLK1Value+0x76>
	}
	else
	{
		ahbp1 = AHB_ARRAY1[temp-4];
 8000afe:	7a3b      	ldrb	r3, [r7, #8]
 8000b00:	3b04      	subs	r3, #4
 8000b02:	4a0d      	ldr	r2, [pc, #52]	; (8000b38 <RCC_GetPCLK1Value+0xa4>)
 8000b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b08:	72bb      	strb	r3, [r7, #10]
	}

	pckl1 = (SystemClk / ahbp) /ahbp1;
 8000b0a:	7afb      	ldrb	r3, [r7, #11]
 8000b0c:	68fa      	ldr	r2, [r7, #12]
 8000b0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000b12:	7abb      	ldrb	r3, [r7, #10]
 8000b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b18:	607b      	str	r3, [r7, #4]

	return pckl1;
 8000b1a:	687b      	ldr	r3, [r7, #4]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3714      	adds	r7, #20
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	00f42400 	.word	0x00f42400
 8000b30:	007a1200 	.word	0x007a1200
 8000b34:	20000020 	.word	0x20000020
 8000b38:	20000040 	.word	0x20000040

08000b3c <I2C_Init>:

void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0 ;
 8000b44:	2300      	movs	r3, #0
 8000b46:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx,ENABLE);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff ff68 	bl	8000a24 <I2C_PeriClockControl>

	//ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << 10;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	7a5b      	ldrb	r3, [r3, #9]
 8000b58:	029b      	lsls	r3, r3, #10
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	68fa      	ldr	r2, [r7, #12]
 8000b68:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() /1000000U ;
 8000b6e:	f7ff ff91 	bl	8000a94 <RCC_GetPCLK1Value>
 8000b72:	4602      	mov	r2, r0
 8000b74:	4b47      	ldr	r3, [pc, #284]	; (8000c94 <I2C_Init+0x158>)
 8000b76:	fba3 2302 	umull	r2, r3, r3, r2
 8000b7a:	0c9b      	lsrs	r3, r3, #18
 8000b7c:	68fa      	ldr	r2, [r7, #12]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 =  (tempreg & 0x3F);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	68fa      	ldr	r2, [r7, #12]
 8000b88:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000b8c:	605a      	str	r2, [r3, #4]

   //program the device own address
	tempreg = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	7a1b      	ldrb	r3, [r3, #8]
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	461a      	mov	r2, r3
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	60fb      	str	r3, [r7, #12]
	tempreg |= ( 1 << 14);
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba6:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	68fa      	ldr	r2, [r7, #12]
 8000bae:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	4a36      	ldr	r2, [pc, #216]	; (8000c98 <I2C_Init+0x15c>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d80f      	bhi.n	8000be2 <I2C_Init+0xa6>
	{
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000bc2:	f7ff ff67 	bl	8000a94 <RCC_GetPCLK1Value>
 8000bc6:	4602      	mov	r2, r0
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd2:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8000bd4:	897b      	ldrh	r3, [r7, #10]
 8000bd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	e02d      	b.n	8000c3e <I2C_Init+0x102>
	}else
	{
		//mode is fast mode
		tempreg |= ( 1 << 15);
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000be8:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	7a9b      	ldrb	r3, [r3, #10]
 8000bee:	039b      	lsls	r3, r3, #14
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	7a9b      	ldrb	r3, [r3, #10]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d10b      	bne.n	8000c18 <I2C_Init+0xdc>
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000c00:	f7ff ff48 	bl	8000a94 <RCC_GetPCLK1Value>
 8000c04:	4601      	mov	r1, r0
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	685a      	ldr	r2, [r3, #4]
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	4413      	add	r3, r2
 8000c10:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c14:	817b      	strh	r3, [r7, #10]
 8000c16:	e00c      	b.n	8000c32 <I2C_Init+0xf6>
		}else
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000c18:	f7ff ff3c 	bl	8000a94 <RCC_GetPCLK1Value>
 8000c1c:	4601      	mov	r1, r0
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	685a      	ldr	r2, [r3, #4]
 8000c22:	4613      	mov	r3, r2
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	4413      	add	r3, r2
 8000c28:	009a      	lsls	r2, r3, #2
 8000c2a:	4413      	add	r3, r2
 8000c2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c30:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 8000c32:	897b      	ldrh	r3, [r7, #10]
 8000c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c38:	68fa      	ldr	r2, [r7, #12]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	68fa      	ldr	r2, [r7, #12]
 8000c44:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	4a13      	ldr	r2, [pc, #76]	; (8000c98 <I2C_Init+0x15c>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d809      	bhi.n	8000c64 <I2C_Init+0x128>
	{
		//mode is standard mode

		tempreg = (RCC_GetPCLK1Value() /1000000U) + 1 ;
 8000c50:	f7ff ff20 	bl	8000a94 <RCC_GetPCLK1Value>
 8000c54:	4602      	mov	r2, r0
 8000c56:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <I2C_Init+0x158>)
 8000c58:	fba3 2302 	umull	r2, r3, r3, r2
 8000c5c:	0c9b      	lsrs	r3, r3, #18
 8000c5e:	3301      	adds	r3, #1
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	e00d      	b.n	8000c80 <I2C_Init+0x144>

	}else
	{
		//mode is fast mode
		tempreg = ( (RCC_GetPCLK1Value() * 300) / 1000000000U ) + 1;
 8000c64:	f7ff ff16 	bl	8000a94 <RCC_GetPCLK1Value>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000c6e:	fb03 f302 	mul.w	r3, r3, r2
 8000c72:	0a5b      	lsrs	r3, r3, #9
 8000c74:	4a09      	ldr	r2, [pc, #36]	; (8000c9c <I2C_Init+0x160>)
 8000c76:	fba2 2303 	umull	r2, r3, r2, r3
 8000c7a:	09db      	lsrs	r3, r3, #7
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	60fb      	str	r3, [r7, #12]

	}

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	68fa      	ldr	r2, [r7, #12]
 8000c86:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000c8a:	621a      	str	r2, [r3, #32]

}
 8000c8c:	bf00      	nop
 8000c8e:	3710      	adds	r7, #16
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	431bde83 	.word	0x431bde83
 8000c98:	000186a0 	.word	0x000186a0
 8000c9c:	00044b83 	.word	0x00044b83

08000ca0 <I2C_GetFlagStatus>:

}


uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	695a      	ldr	r2, [r3, #20]
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e000      	b.n	8000cbc <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000cba:	2300      	movs	r3, #0
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <I2C_MasterSendData>:



void I2C_MasterSendData(I2C_Handle_t *pI2CHandle,uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
 8000cd4:	70fb      	strb	r3, [r7, #3]
	// 1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff fe18 	bl	8000910 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB)   );
 8000ce0:	bf00      	nop
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ffd9 	bl	8000ca0 <I2C_GetFlagStatus>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d0f6      	beq.n	8000ce2 <I2C_MasterSendData+0x1a>

	//3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits )
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx,SlaveAddr);
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	78fa      	ldrb	r2, [r7, #3]
 8000cfa:	4611      	mov	r1, r2
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff fe17 	bl	8000930 <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm that address phase is completed by checking the ADDR flag in teh SR1
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR)   );
 8000d02:	bf00      	nop
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2102      	movs	r1, #2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff ffc8 	bl	8000ca0 <I2C_GetFlagStatus>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d0f6      	beq.n	8000d04 <I2C_MasterSendData+0x3c>

	//5. clear the ADDR flag according to its software sequence
	//   Note: Until ADDR is cleared SCL will be stretched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle);
 8000d16:	68f8      	ldr	r0, [r7, #12]
 8000d18:	f7ff fe20 	bl	800095c <I2C_ClearADDRFlag>

	//6. send the data until len becomes 0

	while(Len > 0)
 8000d1c:	e014      	b.n	8000d48 <I2C_MasterSendData+0x80>
	{
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) ); //Wait till TXE is set
 8000d1e:	bf00      	nop
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2180      	movs	r1, #128	; 0x80
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff ffba 	bl	8000ca0 <I2C_GetFlagStatus>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d0f6      	beq.n	8000d20 <I2C_MasterSendData+0x58>
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	781a      	ldrb	r2, [r3, #0]
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	60bb      	str	r3, [r7, #8]
		Len--;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	3b01      	subs	r3, #1
 8000d46:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d1e7      	bne.n	8000d1e <I2C_MasterSendData+0x56>

	//7. when Len becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
	//   Note: TXE=1 , BTF=1 , means that both SR and DR are empty and next transmission should begin
	//   when BTF=1 SCL will be stretched (pulled to LOW)

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) );
 8000d4e:	bf00      	nop
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2180      	movs	r1, #128	; 0x80
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff ffa2 	bl	8000ca0 <I2C_GetFlagStatus>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d0f6      	beq.n	8000d50 <I2C_MasterSendData+0x88>

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_BTF) );
 8000d62:	bf00      	nop
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2104      	movs	r1, #4
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff ff98 	bl	8000ca0 <I2C_GetFlagStatus>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d0f6      	beq.n	8000d64 <I2C_MasterSendData+0x9c>


	//8. Generate STOP condition and master need not to wait for the completion of stop condition.
	//   Note: generating STOP, automatically clears the BTF
	if(Sr == I2C_DISABLE_SR )
 8000d76:	7e3b      	ldrb	r3, [r7, #24]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d104      	bne.n	8000d86 <I2C_MasterSendData+0xbe>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fe22 	bl	80009ca <I2C_GenerateStopCondition>

}
 8000d86:	bf00      	nop
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <I2C_ManageAcking>:

}


void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	b083      	sub	sp, #12
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
 8000d96:	460b      	mov	r3, r1
 8000d98:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 8000d9a:	78fb      	ldrb	r3, [r7, #3]
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d106      	bne.n	8000dae <I2C_ManageAcking+0x20>
	{
		//enable the ack
		pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	601a      	str	r2, [r3, #0]
	}else
	{
		//disable the ack
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
	}
}
 8000dac:	e005      	b.n	8000dba <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	601a      	str	r2, [r3, #0]
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
	...

08000dc8 <__libc_init_array>:
 8000dc8:	b570      	push	{r4, r5, r6, lr}
 8000dca:	4e0d      	ldr	r6, [pc, #52]	; (8000e00 <__libc_init_array+0x38>)
 8000dcc:	4c0d      	ldr	r4, [pc, #52]	; (8000e04 <__libc_init_array+0x3c>)
 8000dce:	1ba4      	subs	r4, r4, r6
 8000dd0:	10a4      	asrs	r4, r4, #2
 8000dd2:	2500      	movs	r5, #0
 8000dd4:	42a5      	cmp	r5, r4
 8000dd6:	d109      	bne.n	8000dec <__libc_init_array+0x24>
 8000dd8:	4e0b      	ldr	r6, [pc, #44]	; (8000e08 <__libc_init_array+0x40>)
 8000dda:	4c0c      	ldr	r4, [pc, #48]	; (8000e0c <__libc_init_array+0x44>)
 8000ddc:	f000 f818 	bl	8000e10 <_init>
 8000de0:	1ba4      	subs	r4, r4, r6
 8000de2:	10a4      	asrs	r4, r4, #2
 8000de4:	2500      	movs	r5, #0
 8000de6:	42a5      	cmp	r5, r4
 8000de8:	d105      	bne.n	8000df6 <__libc_init_array+0x2e>
 8000dea:	bd70      	pop	{r4, r5, r6, pc}
 8000dec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000df0:	4798      	blx	r3
 8000df2:	3501      	adds	r5, #1
 8000df4:	e7ee      	b.n	8000dd4 <__libc_init_array+0xc>
 8000df6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000dfa:	4798      	blx	r3
 8000dfc:	3501      	adds	r5, #1
 8000dfe:	e7f2      	b.n	8000de6 <__libc_init_array+0x1e>
 8000e00:	08000e28 	.word	0x08000e28
 8000e04:	08000e28 	.word	0x08000e28
 8000e08:	08000e28 	.word	0x08000e28
 8000e0c:	08000e2c 	.word	0x08000e2c

08000e10 <_init>:
 8000e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e12:	bf00      	nop
 8000e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e16:	bc08      	pop	{r3}
 8000e18:	469e      	mov	lr, r3
 8000e1a:	4770      	bx	lr

08000e1c <_fini>:
 8000e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e1e:	bf00      	nop
 8000e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e22:	bc08      	pop	{r3}
 8000e24:	469e      	mov	lr, r3
 8000e26:	4770      	bx	lr
